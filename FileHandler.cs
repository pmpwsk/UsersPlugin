using System.Text;

namespace uwap.WebFramework.Plugins;

public partial class UsersPlugin : Plugin
{
    public override byte[]? GetFile(string relPath, string pathPrefix)
    {
        string pluginHome = pathPrefix == "" ? "/" : pathPrefix;
        return relPath switch
        {
            "/2fa.js" => Encoding.UTF8.GetBytes($"let code = document.querySelector(\"#code\");\r\n\r\nasync function Continue() {{\r\n    if (code.value === \"\") {{\r\n        ShowError(\"Enter the current code or a recovery code.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/2fa?code=\" + encodeURIComponent(code.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text === \"no\") {{\r\n                ShowError(\"Invalid code.\");\r\n            }} else if (text === \"ok\") {{\r\n                Redirect();\r\n            }} else {{\r\n                ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/login.js" => Encoding.UTF8.GetBytes($"let username = document.querySelector(\"#username\");\r\nlet password = document.querySelector(\"#password\");\r\nlet continueButton = document.querySelector(\"#continueButton\").firstElementChild;\r\n\r\nasync function Continue() {{\r\n    if (username.value === \"\") {{\r\n        ShowError(\"Enter your username.\");\r\n    }} else if (password.value === \"\") {{\r\n        ShowError(\"Enter your password.\");\r\n    }} else {{\r\n        continueButton.innerText = \"Loading...\";\r\n        let response = await fetch(\"/api{pathPrefix}/login?username=\" + encodeURIComponent(username.value) + \"&password=\" + encodeURIComponent(password.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text === \"no\") {{\r\n                ShowError(\"Invalid username or password.\");\r\n            }} else if (text === \"ok\") {{\r\n                Redirect();\r\n            }} else {{\r\n                ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n        continueButton.innerText = \"Continue\";\r\n    }}\r\n}}"),
            "/register.js" => Encoding.UTF8.GetBytes($"let username = document.querySelector(\"#username\");\r\nlet email = document.querySelector(\"#email\");\r\nlet password1 = document.querySelector(\"#password1\");\r\nlet password2 = document.querySelector(\"#password2\");\r\nlet continueButton = document.querySelector(\"#continueButton\").firstElementChild;\r\n\r\nasync function Continue() {{\r\n    if (username.value === \"\") {{\r\n        ShowError(\"Enter a username.\");\r\n    }} else if (email.value === \"\") {{\r\n        ShowError(\"Enter your email address.\");\r\n    }} else if (password1.value === \"\") {{\r\n        ShowError(\"Enter a password.\");\r\n    }} else if (password2.value === \"\") {{\r\n        ShowError(\"Confirm the password.\");\r\n    }} else if (password1.value != password2.value) {{\r\n        ShowError(\"The passwords do not match.\");\r\n    }} else {{\r\n        continueButton.innerText = \"Loading...\";\r\n        let response = await fetch(\"/api{pathPrefix}/register?username=\" + encodeURIComponent(username.value) + \"&email=\" + encodeURIComponent(email.value) + \"&password=\" + encodeURIComponent(password1.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": Redirect(); break;\r\n                case \"bad-username\": ShowError(\"Usernames must be at least 3 characters long and only contain lowercase letters, digits, dashes, dots and underscores. The first and last characters can only be letters or digits.\"); break;\r\n                case \"bad-password\": ShowError(\"Passwords must be at least 8 characters long and contain at least one uppercase letter, lowercase letter, digit and special character.\"); break;\r\n                case \"bad-email\": ShowError(\"Invalid email address.\"); break;\r\n                case \"username-exists\": ShowError(\"This username is already being used by another account.\"); break;\r\n                case \"email-exists\": ShowError(\"This email address is already being used by another account.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n        continueButton.innerText = \"Continue\";\r\n    }}\r\n}}"),
            "/users-view.js" => Encoding.UTF8.GetBytes($"let key = document.querySelector(\"#key\");\r\nlet val = document.querySelector(\"#value\");\r\nlet del = document.querySelector(\"#delete\");\r\n\r\nasync function SetSetting(id) {{\r\n    if (key.value === \"\") {{\r\n        ShowError(\"Enter a key.\");\r\n    }} else if (val.value === \"\") {{\r\n        ShowError(\"Enter a value.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/users/set-setting?id=\" + id + \"&key=\" + encodeURIComponent(key.value) + \"&value=\" + encodeURIComponent(val.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.reload(); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}\r\n\r\nasync function DeleteSetting(id, k) {{\r\n    let response = await fetch(\"/api{pathPrefix}/users/delete-setting?id=\" + id + \"&key=\" + encodeURIComponent(k));\r\n    if (response.status === 200) {{\r\n        let text = await response.text();\r\n        switch (text) {{\r\n            case \"ok\": window.location.reload(); break;\r\n            default: ShowError(\"Connection failed.\");\r\n        }}\r\n    }} else {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}\r\n\r\nasync function DeleteUser(id) {{\r\n    if (del.firstElementChild.textContent === \"Are you sure?\") {{\r\n        let response = await fetch(\"/api{pathPrefix}/users/delete-user?id=\" + id);\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(\"{pathPrefix}/users\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n    else {{\r\n        del.firstElementChild.textContent = \"Are you sure?\";\r\n    }}\r\n}}"),
            "/verify-change.js" => Encoding.UTF8.GetBytes($"let code = document.querySelector(\"#email\");\r\n\r\nasync function Continue() {{\r\n    if (code.value === \"\") {{\r\n        ShowError(\"Enter your email address.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/verify-change?email=\" + encodeURIComponent(code.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": Redirect(); break;\r\n                case \"bad\": ShowError(\"Invalid email address.\"); break;\r\n                case \"exists\": ShowError(\"This email address is already being used by another account.\"); break;\r\n                case \"same\": ShowError(\"The provided email address is the same as the old one.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/verify.js" => Encoding.UTF8.GetBytes($"let code = document.querySelector(\"#code\");\r\n\r\nasync function Continue() {{\r\n    if (code.value === \"\") {{\r\n        ShowError(\"Enter a code.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/verify?code=\" + encodeURIComponent(code.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text === \"ok\") {{\r\n                Redirect();\r\n            }} else {{\r\n                ShowError(text);\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}\r\n\r\nasync function Resend() {{\r\n    let response = await fetch(\"/api{pathPrefix}/verify?resend=please\");\r\n    if (response.status != 200) {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}"),
            "/recovery/password-request.js" => Encoding.UTF8.GetBytes($"let email = document.querySelector(\"#email\");\r\n\r\nasync function Continue(url) {{\r\n    if (email.value === \"\") {{\r\n        ShowError(\"Enter your email address.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/recovery/password?email=\" + encodeURIComponent(email.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(url); break;\r\n                case \"no\": ShowError(\"Invalid email address.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/recovery/password-set.js" => Encoding.UTF8.GetBytes($"let password1 = document.querySelector(\"#password1\");\r\nlet password2 = document.querySelector(\"#password2\");\r\n\r\nasync function Continue(url, token) {{\r\n    if (password1.value === \"\") {{\r\n        ShowError(\"Enter a password.\");\r\n    }} else if (password2.value === \"\") {{\r\n        ShowError(\"Confirm the password.\");\r\n    }} else if (password1.value != password2.value) {{\r\n        ShowError(\"The passwords do not match.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/recovery/password?password=\" + encodeURIComponent(password1.value) + \"&token=\" + token);\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(url); break;\r\n                case \"bad\": ShowError(\"Passwords must be at least 8 characters long and contain at least one uppercase letter, lowercase letter, digit and special character.\"); break;\r\n                case \"same\": ShowError(\"The provided password is the same as the old one.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/recovery/username.js" => Encoding.UTF8.GetBytes($"let email = document.querySelector(\"#email\");\r\n\r\nasync function Continue(url) {{\r\n    if (email.value === \"\") {{\r\n        ShowError(\"Enter your email address.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/recovery/username?email=\" + encodeURIComponent(email.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(url); break;\r\n                case \"no\": ShowError(\"Invalid email address.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/settings/2fa.js" => Encoding.UTF8.GetBytes($"let code = document.querySelector(\"#code\");\r\nlet password = document.querySelector(\"#password\");\r\n\r\nasync function Continue(method) {{\r\n    if (code.value === \"\") {{\r\n        ShowError(\"Enter the current code or a recovery code.\");\r\n    }} else if (password.value === \"\") {{\r\n        ShowError(\"Enter your password.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/settings/2fa?method=\" + method + \"&code=\" + encodeURIComponent(code.value) + \"&password=\" + encodeURIComponent(password.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text === \"no\") {{\r\n                ShowError(\"Invalid code or password.\");\r\n            }} else if (text === \"ok\") {{\r\n                window.location.assign(\"{pathPrefix}/settings\");\r\n            }} else {{\r\n                ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/settings/delete.js" => Encoding.UTF8.GetBytes($"let password = document.querySelector(\"#password\");\r\nlet code = document.querySelector(\"#code\");\r\n\r\nasync function Continue() {{\r\n    if (password.value === \"\") {{\r\n        ShowError(\"Enter your password.\");\r\n    }} else if (code.value === \"\") {{\r\n        ShowError(\"Enter the current code or a recovery code.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/settings/delete?code=\" + encodeURIComponent(code.value) + \"&password=\" + encodeURIComponent(password.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(\"/\"); break;\r\n                case \"no\": ShowError(\"Invalid password or 2FA code.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/settings/email-verify.js" => Encoding.UTF8.GetBytes($"let code = document.querySelector(\"#code\");\r\n\r\nasync function Continue() {{\r\n    if (code.value === \"\") {{\r\n        ShowError(\"Enter a code.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/settings/email?code=\" + encodeURIComponent(code.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(\"{pathPrefix}/settings\"); break;\r\n                case \"no\": ShowError(\"Invalid code.\"); break;\r\n                case \"bad\": ShowError(\"Invalid email address.\"); break;\r\n                case \"exists\": ShowError(\"This email address is already being used by another account.\"); break;\r\n                case \"same\": ShowError(\"The provided email address is the same as the old one.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}\r\n\r\nasync function Resend() {{\r\n    let response = await fetch(\"/api{pathPrefix}/settings/email?resend=please\");\r\n    if (response.status != 200) {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}"),
            "/settings/email.js" => Encoding.UTF8.GetBytes($"let email = document.querySelector(\"#email\");\r\nlet password = document.querySelector(\"#password\");\r\nlet code = document.querySelector(\"#code\");\r\n\r\nasync function Continue() {{\r\n    if (email.value === \"\") {{\r\n        ShowError(\"Enter the email address.\");\r\n    }} else if (password.value === \"\") {{\r\n        ShowError(\"Enter your password.\");\r\n    }} else if (code.value === \"\") {{\r\n        ShowError(\"Enter the current code or a recovery code.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/settings/email?email=\" + encodeURIComponent(email.value) + \"&code=\" + encodeURIComponent(code.value) + \"&password=\" + encodeURIComponent(password.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.reload(); break;\r\n                case \"no\": ShowError(\"Invalid password or 2FA code.\"); break;\r\n                case \"bad\": ShowError(\"Invalid email address.\"); break;\r\n                case \"exists\": ShowError(\"This email address is already being used by another account.\"); break;\r\n                case \"same\": ShowError(\"The provided email address is the same as the old one.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/settings/password.js" => Encoding.UTF8.GetBytes($"let password1 = document.querySelector(\"#password1\");\r\nlet password2 = document.querySelector(\"#password2\");\r\nlet password = document.querySelector(\"#password\");\r\nlet code = document.querySelector(\"#code\");\r\nlet continueButton = document.querySelector(\"#continueButton\").firstElementChild;\r\n\r\nasync function Continue() {{\r\n    if (password1.value === \"\") {{\r\n        ShowError(\"Enter a password.\");\r\n    }} else if (password2.value === \"\") {{\r\n        ShowError(\"Confirm the password.\");\r\n    }} else if (password1.value != password2.value) {{\r\n        ShowError(\"The passwords do not match.\");\r\n    }} else if (password.value === \"\") {{\r\n        ShowError(\"Enter your password.\");\r\n    }} else if (code.value === \"\") {{\r\n        ShowError(\"Enter the current code or a recovery code.\");\r\n    }} else {{\r\n        continueButton.innerText = \"Loading...\";\r\n        let response = await fetch(\"/api{pathPrefix}/settings/password?new-password=\" + encodeURIComponent(password1.value) + \"&code=\" + encodeURIComponent(code.value) + \"&password=\" + encodeURIComponent(password.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(\"{pathPrefix}/settings\"); break;\r\n                case \"no\": ShowError(\"Invalid password or 2FA code.\"); break;\r\n                case \"bad\": ShowError(\"Passwords must be at least 8 characters long and contain at least one uppercase letter, lowercase letter, digit and special character.\"); break;\r\n                case \"same\": ShowError(\"The provided password is the same as the old one.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n        continueButton.innerText = \"Change\";\r\n    }}\r\n}}\r\n\r\nasync function Cancel() {{\r\n    let response = await fetch(\"/api{pathPrefix}/settings/password?action=cancel\");\r\n    if (response.status === 200) {{\r\n        window.location.reload();\r\n    }}\r\n}}"),
            "/settings/theme.js" => Encoding.UTF8.GetBytes($"async function Set(name) {{\r\n    let response = await fetch(\"/api{pathPrefix}/settings/theme?name=\" + name);\r\n    if (response.status === 200) {{\r\n        window.location.reload();\r\n    }}\r\n}}"),
            "/settings/username.js" => Encoding.UTF8.GetBytes($"let username = document.querySelector(\"#username\");\r\nlet password = document.querySelector(\"#password\");\r\nlet code = document.querySelector(\"#code\");\r\n\r\nasync function Continue() {{\r\n    if (username.value === \"\") {{\r\n        ShowError(\"Enter a username.\");\r\n    }} else if (password.value === \"\") {{\r\n        ShowError(\"Enter your password.\");\r\n    }} else if (code.value === \"\") {{\r\n        ShowError(\"Enter the current code or a recovery code.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/settings/username?username=\" + encodeURIComponent(username.value) + \"&code=\" + encodeURIComponent(code.value) + \"&password=\" + encodeURIComponent(password.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(\"{pathPrefix}/settings\"); break;\r\n                case \"no\": ShowError(\"Invalid password or 2FA code.\"); break;\r\n                case \"bad\": ShowError(\"Usernames must be at least 3 characters long and only contain lowercase letters, digits, dashes, dots and underscores. The first and last characters can only be letters or digits.\"); break;\r\n                case \"exists\": ShowError(\"This username is already being used by another account.\"); break;\r\n                case \"same\": ShowError(\"The provided username is the same as the old one.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            _ => null
        };
    }
    
    public override string? GetFileVersion(string relPath)
    {
        return relPath switch
        {
            "/2fa.js" => "638303903673887826",
            "/login.js" => "638303903833274937",
            "/register.js" => "638303904093257684",
            "/users-view.js" => "638303972326257862",
            "/verify-change.js" => "638303905220814473",
            "/verify.js" => "638303905089017699",
            "/recovery/password-request.js" => "638303901129955811",
            "/recovery/password-set.js" => "638303901346411666",
            "/recovery/username.js" => "638303901562876222",
            "/settings/2fa.js" => "638303902065103752",
            "/settings/delete.js" => "638303902380140931",
            "/settings/email-verify.js" => "638303902993968637",
            "/settings/email.js" => "638303902667329479",
            "/settings/password.js" => "638304086875783319",
            "/settings/theme.js" => "638303903368845070",
            "/settings/username.js" => "638303903515698874",
            _ => null
        };
    }
}
