namespace uwap.WebFramework.Plugins;

public partial class UsersPlugin : Plugin
{
    public override byte[]? GetFile(string relPath, string pathPrefix, string domain)
        => relPath switch
        {
            "/2fa.js" => System.Text.Encoding.UTF8.GetBytes($"let code = document.querySelector(\"#code\");\r\n\r\nasync function Continue() {{\r\n    if (code.value === \"\") {{\r\n        ShowError(\"Enter the current code or a recovery code.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/2fa?code=\" + encodeURIComponent(code.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text === \"no\") {{\r\n                ShowError(\"Invalid code.\");\r\n            }} else if (text === \"ok\") {{\r\n                Redirect();\r\n            }} else {{\r\n                ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/auth-request.js" => System.Text.Encoding.UTF8.GetBytes($"async function Allow() {{\r\n    try {{\r\n        var background = GetQuery(\"background\");\r\n        if (background !== \"null\") {{\r\n            var result = await GetReturnAddress(background);\r\n            if (result !== null) {{\r\n                if ((await fetch(result)).status === 200) {{\r\n                    window.location.assign(GetQuery(\"yes\"));\r\n                    return;\r\n                }}\r\n            }}\r\n        }} else {{\r\n            var result = await GetReturnAddress(GetQuery(\"yes\"));\r\n            if (result !== null) {{\r\n                window.location.assign(result);\r\n                return;\r\n            }}\r\n        }}\r\n    }} catch {{\r\n    }}\r\n\r\n    ShowError(\"Connection failed.\");\r\n}}\r\n\r\nasync function GetReturnAddress(address) {{\r\n    try {{\r\n        var response = await fetch(\"/api{pathPrefix}/generate-limited-token?return=\" + encodeURIComponent(address) + \"&name=\" + encodeURIComponent(GetQuery(\"name\")) + \"&allowed=\" + encodeURIComponent(GetQuery(\"allowed\")));\r\n        if (response.status === 200)\r\n            return await response.text();\r\n    }} catch {{\r\n    }}\r\n\r\n    return null;\r\n}}\r\n\r\nfunction GetQuery(q) {{\r\n    try {{\r\n        let query = new URLSearchParams(window.location.search);\r\n        if (query.has(q)) {{\r\n            return query.get(q);\r\n        }} else {{\r\n            return \"null\";\r\n        }}\r\n    }} catch {{\r\n        return \"null\";\r\n    }}\r\n}}"),
            "/login.js" => System.Text.Encoding.UTF8.GetBytes($"let username = document.querySelector(\"#username\");\r\nlet password = document.querySelector(\"#password\");\r\nlet continueButton = document.querySelector(\"#continueButton\").firstElementChild;\r\n\r\nasync function Continue() {{\r\n    if (username.value === \"\") {{\r\n        ShowError(\"Enter your username.\");\r\n    }} else if (password.value === \"\") {{\r\n        ShowError(\"Enter your password.\");\r\n    }} else {{\r\n        continueButton.innerText = \"Loading...\";\r\n        let response = await fetch(\"/api{pathPrefix}/login?username=\" + encodeURIComponent(username.value) + \"&password=\" + encodeURIComponent(password.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text === \"no\") {{\r\n                ShowError(\"Invalid username or password.\");\r\n            }} else if (text === \"ok\") {{\r\n                Redirect();\r\n            }} else {{\r\n                ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n        continueButton.innerText = \"Continue\";\r\n    }}\r\n}}"),
            "/register.js" => System.Text.Encoding.UTF8.GetBytes($"let username = document.querySelector(\"#username\");\r\nlet email = document.querySelector(\"#email\");\r\nlet password1 = document.querySelector(\"#password1\");\r\nlet password2 = document.querySelector(\"#password2\");\r\nlet continueButton = document.querySelector(\"#continueButton\").firstElementChild;\r\n\r\nasync function Continue() {{\r\n    if (username.value === \"\") {{\r\n        ShowError(\"Enter a username.\");\r\n    }} else if (email.value === \"\") {{\r\n        ShowError(\"Enter your email address.\");\r\n    }} else if (password1.value === \"\") {{\r\n        ShowError(\"Enter a password.\");\r\n    }} else if (password2.value === \"\") {{\r\n        ShowError(\"Confirm the password.\");\r\n    }} else if (password1.value != password2.value) {{\r\n        ShowError(\"The passwords do not match.\");\r\n    }} else {{\r\n        continueButton.innerText = \"Loading...\";\r\n        let response = await fetch(\"/api{pathPrefix}/register?username=\" + encodeURIComponent(username.value) + \"&email=\" + encodeURIComponent(email.value) + \"&password=\" + encodeURIComponent(password1.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": Redirect(); break;\r\n                case \"bad-username\": ShowError(\"Usernames must be at least 3 characters long and only contain lowercase letters, digits, dashes, dots and underscores. The first and last characters can only be letters or digits.\"); break;\r\n                case \"bad-password\": ShowError(\"Passwords must be at least 8 characters long and contain at least one uppercase letter, lowercase letter, digit and special character.\"); break;\r\n                case \"bad-email\": ShowError(\"Invalid email address.\"); break;\r\n                case \"username-exists\": ShowError(\"This username is already being used by another account.\"); break;\r\n                case \"email-exists\": ShowError(\"This email address is already being used by another account.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n        continueButton.innerText = \"Continue\";\r\n    }}\r\n}}"),
            "/users-view.js" => System.Text.Encoding.UTF8.GetBytes($"let key = document.querySelector(\"#key\");\r\nlet val = document.querySelector(\"#value\");\r\nlet del = document.querySelector(\"#delete\");\r\nlet access = document.querySelector(\"#access-level\");\r\nlet save = document.querySelector(\"#save\");\r\n\r\nasync function SetSetting(id) {{\r\n    if (key.value === \"\") {{\r\n        ShowError(\"Enter a key.\");\r\n    }} else if (val.value === \"\") {{\r\n        ShowError(\"Enter a value.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/users/set-setting?id=\" + id + \"&key=\" + encodeURIComponent(key.value) + \"&value=\" + encodeURIComponent(val.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.reload(); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}\r\n\r\nasync function DeleteSetting(id, k) {{\r\n    let response = await fetch(\"/api{pathPrefix}/users/delete-setting?id=\" + id + \"&key=\" + encodeURIComponent(k));\r\n    if (response.status === 200) {{\r\n        let text = await response.text();\r\n        switch (text) {{\r\n            case \"ok\": window.location.reload(); break;\r\n            default: ShowError(\"Connection failed.\");\r\n        }}\r\n    }} else {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}\r\n\r\nasync function DeleteUser(id) {{\r\n    if (del.firstElementChild.textContent === \"Are you sure?\") {{\r\n        let response = await fetch(\"/api{pathPrefix}/users/delete-user?id=\" + id);\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(\"{pathPrefix}/users\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n    else {{\r\n        del.firstElementChild.textContent = \"Are you sure?\";\r\n    }}\r\n}}\r\n\r\nasync function SaveAccessLevel(id) {{\r\n    HideError();\r\n    var value = parseInt(access.value);\r\n    if (value == NaN || value < 1 || value > 65355) {{\r\n        ShowError(\"The access level needs to be a number between 1 and 65355!\");\r\n        return;\r\n    }}\r\n    save.className = \"green\";\r\n    save.innerText = \"Saving...\";\r\n    try {{\r\n        switch ((await fetch(\"/api{pathPrefix}/users/set-access-level?id=\" + id + \"&value=\" + access.value)).status) {{\r\n            case 200:\r\n                save.className = \"\";\r\n                save.innerText = \"Saved!\";\r\n                return;\r\n            case 400:\r\n                ShowError(\"The access level needs to be a number between 1 and 65355!\");\r\n                break;\r\n            default:\r\n                ShowError(\"Connection failed.\");\r\n                break;\r\n        }}\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n    save.className = \"green\";\r\n    save.innerText = \"Save\";\r\n}}\r\n\r\nasync function SetAccessLevel(id, value) {{\r\n    access.value = value;\r\n    SaveAccessLevel(id);\r\n}}\r\n\r\nasync function AccessLevelChanged() {{\r\n    save.className = \"green\";\r\n    save.innerText = \"Save\";\r\n}}"),
            "/verify-change.js" => System.Text.Encoding.UTF8.GetBytes($"let code = document.querySelector(\"#email\");\r\n\r\nasync function Continue() {{\r\n    if (code.value === \"\") {{\r\n        ShowError(\"Enter your email address.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/verify-change?email=\" + encodeURIComponent(code.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": Redirect(); break;\r\n                case \"bad\": ShowError(\"Invalid email address.\"); break;\r\n                case \"exists\": ShowError(\"This email address is already being used by another account.\"); break;\r\n                case \"same\": ShowError(\"The provided email address is the same as the old one.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/verify.js" => System.Text.Encoding.UTF8.GetBytes($"let code = document.querySelector(\"#code\");\r\n\r\nasync function Continue() {{\r\n    if (code.value === \"\") {{\r\n        ShowError(\"Enter a code.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/verify?code=\" + encodeURIComponent(code.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text === \"ok\") {{\r\n                Redirect();\r\n            }} else {{\r\n                ShowError(text);\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}\r\n\r\nasync function Resend() {{\r\n    let response = await fetch(\"/api{pathPrefix}/verify?resend=please\");\r\n    if (response.status != 200) {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}"),
            "/fonts/roboto-mono.eot" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3JvYm90by1tb25vLmVvdA,
            "/fonts/roboto-mono.otf" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3JvYm90by1tb25vLm90Zg,
            "/fonts/roboto-mono.svg" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3JvYm90by1tb25vLnN2Zw,
            "/fonts/roboto-mono.ttf" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3JvYm90by1tb25vLnR0Zg,
            "/fonts/roboto-mono.woff" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3JvYm90by1tb25vLndvZmY,
            "/fonts/roboto-mono.woff2" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3JvYm90by1tb25vLndvZmYy,
            "/fonts/roboto.eot" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3JvYm90by5lb3Q,
            "/fonts/roboto.otf" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3JvYm90by5vdGY,
            "/fonts/roboto.svg" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3JvYm90by5zdmc,
            "/fonts/roboto.ttf" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3JvYm90by50dGY,
            "/fonts/roboto.woff" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3JvYm90by53b2Zm,
            "/fonts/roboto.woff2" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3JvYm90by53b2ZmMg,
            "/fonts/special-elite.eot" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3NwZWNpYWwtZWxpdGUuZW90,
            "/fonts/special-elite.otf" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3NwZWNpYWwtZWxpdGUub3Rm,
            "/fonts/special-elite.svg" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3NwZWNpYWwtZWxpdGUuc3Zn,
            "/fonts/special-elite.ttf" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3NwZWNpYWwtZWxpdGUudHRm,
            "/fonts/special-elite.woff" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3NwZWNpYWwtZWxpdGUud29mZg,
            "/fonts/special-elite.woff2" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3NwZWNpYWwtZWxpdGUud29mZjI,
            "/fonts/ubuntu-mono.eot" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3VidW50dS1tb25vLmVvdA,
            "/fonts/ubuntu-mono.otf" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3VidW50dS1tb25vLm90Zg,
            "/fonts/ubuntu-mono.svg" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3VidW50dS1tb25vLnN2Zw,
            "/fonts/ubuntu-mono.ttf" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3VidW50dS1tb25vLnR0Zg,
            "/fonts/ubuntu-mono.woff" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3VidW50dS1tb25vLndvZmY,
            "/fonts/ubuntu-mono.woff2" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3VidW50dS1tb25vLndvZmYy,
            "/fonts/ubuntu.eot" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3VidW50dS5lb3Q,
            "/fonts/ubuntu.otf" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3VidW50dS5vdGY,
            "/fonts/ubuntu.svg" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3VidW50dS5zdmc,
            "/fonts/ubuntu.ttf" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3VidW50dS50dGY,
            "/fonts/ubuntu.woff" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3VidW50dS53b2Zm,
            "/fonts/ubuntu.woff2" => UsersPluginBeta.Properties.PluginFiles.L2ZvbnRzL3VidW50dS53b2ZmMg,
            "/recovery/password-request.js" => System.Text.Encoding.UTF8.GetBytes($"let email = document.querySelector(\"#email\");\r\n\r\nasync function Continue(url) {{\r\n    if (email.value === \"\") {{\r\n        ShowError(\"Enter your email address.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/recovery/password?email=\" + encodeURIComponent(email.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(url); break;\r\n                case \"no\": ShowError(\"Invalid email address.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/recovery/password-set.js" => System.Text.Encoding.UTF8.GetBytes($"let password1 = document.querySelector(\"#password1\");\r\nlet password2 = document.querySelector(\"#password2\");\r\n\r\nasync function Continue(url, token) {{\r\n    if (password1.value === \"\") {{\r\n        ShowError(\"Enter a password.\");\r\n    }} else if (password2.value === \"\") {{\r\n        ShowError(\"Confirm the password.\");\r\n    }} else if (password1.value != password2.value) {{\r\n        ShowError(\"The passwords do not match.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/recovery/password?password=\" + encodeURIComponent(password1.value) + \"&token=\" + token);\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(url); break;\r\n                case \"bad\": ShowError(\"Passwords must be at least 8 characters long and contain at least one uppercase letter, lowercase letter, digit and special character.\"); break;\r\n                case \"same\": ShowError(\"The provided password is the same as the old one.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/recovery/username.js" => System.Text.Encoding.UTF8.GetBytes($"let email = document.querySelector(\"#email\");\r\n\r\nasync function Continue(url) {{\r\n    if (email.value === \"\") {{\r\n        ShowError(\"Enter your email address.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/recovery/username?email=\" + encodeURIComponent(email.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(url); break;\r\n                case \"no\": ShowError(\"Invalid email address.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/settings/2fa.js" => System.Text.Encoding.UTF8.GetBytes($"let code = document.querySelector(\"#code\");\r\nlet password = document.querySelector(\"#password\");\r\n\r\nasync function Continue(method) {{\r\n    if (code.value === \"\") {{\r\n        ShowError(\"Enter the current code or a recovery code.\");\r\n    }} else if (password.value === \"\") {{\r\n        ShowError(\"Enter your password.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/settings/2fa?method=\" + method + \"&code=\" + encodeURIComponent(code.value) + \"&password=\" + encodeURIComponent(password.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text === \"no\") {{\r\n                ShowError(\"Invalid code or password.\");\r\n            }} else if (text === \"ok\") {{\r\n                window.location.assign(\"{pathPrefix}/settings\");\r\n            }} else {{\r\n                ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/settings/apps.js" => System.Text.Encoding.UTF8.GetBytes($"async function Remove(index, name, expires) {{\r\n    await fetch(\"/api{pathPrefix}/settings/remove-limited-token?index=\" + index + \"&name=\" + name + \"&expires=\" + expires);\r\n    window.location.reload();\r\n}}"),
            "/settings/delete.js" => System.Text.Encoding.UTF8.GetBytes($"let password = document.querySelector(\"#password\");\r\nlet code = document.querySelector(\"#code\");\r\n\r\nasync function Continue() {{\r\n    if (password.value === \"\") {{\r\n        ShowError(\"Enter your password.\");\r\n    }} else if (code.value === \"\") {{\r\n        ShowError(\"Enter the current code or a recovery code.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/settings/delete?code=\" + encodeURIComponent(code.value) + \"&password=\" + encodeURIComponent(password.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(\"/\"); break;\r\n                case \"no\": ShowError(\"Invalid password or 2FA code.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/settings/email-verify.js" => System.Text.Encoding.UTF8.GetBytes($"let code = document.querySelector(\"#code\");\r\n\r\nasync function Continue() {{\r\n    if (code.value === \"\") {{\r\n        ShowError(\"Enter a code.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/settings/email?code=\" + encodeURIComponent(code.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(\"{pathPrefix}/settings\"); break;\r\n                case \"no\": ShowError(\"Invalid code.\"); break;\r\n                case \"bad\": ShowError(\"Invalid email address.\"); break;\r\n                case \"exists\": ShowError(\"This email address is already being used by another account.\"); break;\r\n                case \"same\": ShowError(\"The provided email address is the same as the old one.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}\r\n\r\nasync function Resend() {{\r\n    let response = await fetch(\"/api{pathPrefix}/settings/email?resend=please\");\r\n    if (response.status != 200) {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}"),
            "/settings/email.js" => System.Text.Encoding.UTF8.GetBytes($"let email = document.querySelector(\"#email\");\r\nlet password = document.querySelector(\"#password\");\r\nlet code = document.querySelector(\"#code\");\r\n\r\nasync function Continue() {{\r\n    if (email.value === \"\") {{\r\n        ShowError(\"Enter the email address.\");\r\n    }} else if (password.value === \"\") {{\r\n        ShowError(\"Enter your password.\");\r\n    }} else if (code.value === \"\") {{\r\n        ShowError(\"Enter the current code or a recovery code.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/settings/email?email=\" + encodeURIComponent(email.value) + \"&code=\" + encodeURIComponent(code.value) + \"&password=\" + encodeURIComponent(password.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.reload(); break;\r\n                case \"no\": ShowError(\"Invalid password or 2FA code.\"); break;\r\n                case \"bad\": ShowError(\"Invalid email address.\"); break;\r\n                case \"exists\": ShowError(\"This email address is already being used by another account.\"); break;\r\n                case \"same\": ShowError(\"The provided email address is the same as the old one.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/settings/password.js" => System.Text.Encoding.UTF8.GetBytes($"let password1 = document.querySelector(\"#password1\");\r\nlet password2 = document.querySelector(\"#password2\");\r\nlet password = document.querySelector(\"#password\");\r\nlet code = document.querySelector(\"#code\");\r\nlet continueButton = document.querySelector(\"#continueButton\").firstElementChild;\r\n\r\nasync function Continue() {{\r\n    if (password1.value === \"\") {{\r\n        ShowError(\"Enter a password.\");\r\n    }} else if (password2.value === \"\") {{\r\n        ShowError(\"Confirm the password.\");\r\n    }} else if (password1.value != password2.value) {{\r\n        ShowError(\"The passwords do not match.\");\r\n    }} else if (password.value === \"\") {{\r\n        ShowError(\"Enter your password.\");\r\n    }} else if (code.value === \"\") {{\r\n        ShowError(\"Enter the current code or a recovery code.\");\r\n    }} else {{\r\n        continueButton.innerText = \"Loading...\";\r\n        let response = await fetch(\"/api{pathPrefix}/settings/password?new-password=\" + encodeURIComponent(password1.value) + \"&code=\" + encodeURIComponent(code.value) + \"&password=\" + encodeURIComponent(password.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(\"{pathPrefix}/settings\"); break;\r\n                case \"no\": ShowError(\"Invalid password or 2FA code.\"); break;\r\n                case \"bad\": ShowError(\"Passwords must be at least 8 characters long and contain at least one uppercase letter, lowercase letter, digit and special character.\"); break;\r\n                case \"same\": ShowError(\"The provided password is the same as the old one.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n        continueButton.innerText = \"Change\";\r\n    }}\r\n}}\r\n\r\nasync function Cancel() {{\r\n    let response = await fetch(\"/api{pathPrefix}/settings/password?action=cancel\");\r\n    if (response.status === 200) {{\r\n        window.location.reload();\r\n    }}\r\n}}"),
            "/settings/theme.js" => System.Text.Encoding.UTF8.GetBytes($"async function Save() {{\r\n    try {{\r\n        let response = await fetch(\"/api{pathPrefix}/settings/theme\"\r\n            + \"?f=\" + document.querySelector(\"#font\").value\r\n            + \"&b=\" + document.querySelector(\"#background\").value\r\n            + \"&a=\" + document.querySelector(\"#accent\").value\r\n            + \"&d=\" + document.querySelector(\"#design\").value);\r\n        if (response.status === 200)\r\n            window.location.reload();\r\n        else ShowError(\"Connection failed.\");\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}"),
            "/settings/username.js" => System.Text.Encoding.UTF8.GetBytes($"let username = document.querySelector(\"#username\");\r\nlet password = document.querySelector(\"#password\");\r\nlet code = document.querySelector(\"#code\");\r\n\r\nasync function Continue() {{\r\n    if (username.value === \"\") {{\r\n        ShowError(\"Enter a username.\");\r\n    }} else if (password.value === \"\") {{\r\n        ShowError(\"Enter your password.\");\r\n    }} else if (code.value === \"\") {{\r\n        ShowError(\"Enter the current code or a recovery code.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/settings/username?username=\" + encodeURIComponent(username.value) + \"&code=\" + encodeURIComponent(code.value) + \"&password=\" + encodeURIComponent(password.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\": window.location.assign(\"{pathPrefix}/settings\"); break;\r\n                case \"no\": ShowError(\"Invalid password or 2FA code.\"); break;\r\n                case \"bad\": ShowError(\"Usernames must be at least 3 characters long and only contain lowercase letters, digits, dashes, dots and underscores. The first and last characters can only be letters or digits.\"); break;\r\n                case \"exists\": ShowError(\"This username is already being used by another account.\"); break;\r\n                case \"same\": ShowError(\"The provided username is the same as the old one.\"); break;\r\n                default: ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/theme/a/blue-dark.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2EvYmx1ZS1kYXJrLmNzcw,
            "/theme/a/blue-light.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2EvYmx1ZS1saWdodC5jc3M,
            "/theme/a/green-dark.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2EvZ3JlZW4tZGFyay5jc3M,
            "/theme/a/green-light.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2EvZ3JlZW4tbGlnaHQuY3Nz,
            "/theme/a/none-dark.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2Evbm9uZS1kYXJrLmNzcw,
            "/theme/a/none-light.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2Evbm9uZS1saWdodC5jc3M,
            "/theme/a/red-dark.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2EvcmVkLWRhcmsuY3Nz,
            "/theme/a/red-light.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2EvcmVkLWxpZ2h0LmNzcw,
            "/theme/a/violet-dark.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2EvdmlvbGV0LWRhcmsuY3Nz,
            "/theme/a/violet-light.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2EvdmlvbGV0LWxpZ2h0LmNzcw,
            "/theme/b/beige.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2IvYmVpZ2UuY3Nz,
            "/theme/b/black.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2IvYmxhY2suY3Nz,
            "/theme/b/dark.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2IvZGFyay5jc3M,
            "/theme/b/light.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2IvbGlnaHQuY3Nz,
            "/theme/b/white.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2Ivd2hpdGUuY3Nz,
            "/theme/d/flat.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2QvZmxhdC5jc3M,
            "/theme/d/layers.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2QvbGF5ZXJzLmNzcw,
            "/theme/d/shadows.css" => UsersPluginBeta.Properties.PluginFiles.L3RoZW1lL2Qvc2hhZG93cy5jc3M,
            "/theme/f/roboto-mono.css" => System.Text.Encoding.UTF8.GetBytes($"@font-face {{\n    font-family: 'roboto-mono';\n    font-style: normal;\n    font-weight: 400;\n    font-display: block;\n    src: url('{pathPrefix}/fonts/roboto-mono.woff2') format('woff2'), url('{pathPrefix}/fonts/roboto-mono.woff') format('woff'), url('{pathPrefix}/fonts/roboto-mono.ttf') format('truetype'), url('{pathPrefix}/fonts/roboto-mono.otf') format('otf'), url('{pathPrefix}/fonts/roboto-mono.eot') format('embedded-opentype'), url('{pathPrefix}/fonts/roboto-mono.svg') format('svg');\n    unicode-range: U+000-5FF;\n    size-adjust: 85%;\n}}\n"),
            "/theme/f/roboto.css" => System.Text.Encoding.UTF8.GetBytes($"@font-face {{\n    font-family: 'roboto';\n    font-style: normal;\n    font-weight: 400;\n    font-display: block;\n    src: url('{pathPrefix}/fonts/roboto.woff2') format('woff2'), url('{pathPrefix}/fonts/roboto.woff') format('woff'), url('{pathPrefix}/fonts/roboto.ttf') format('truetype'), url('{pathPrefix}/fonts/roboto.otf') format('otf'), url('{pathPrefix}/fonts/roboto.eot') format('embedded-opentype'), url('{pathPrefix}/fonts/roboto.svg') format('svg');\n    unicode-range: U+000-5FF;\n    size-adjust: 95%;\n}}\n"),
            "/theme/f/special-elite.css" => System.Text.Encoding.UTF8.GetBytes($"@font-face {{\n    font-family: 'special-elite';\n    font-style: normal;\n    font-weight: 400;\n    font-display: block;\n    src: url('{pathPrefix}/fonts/special-elite.woff2') format('woff2'), url('{pathPrefix}/fonts/special-elite.woff') format('woff'), url('{pathPrefix}/fonts/special-elite.ttf') format('truetype'), url('{pathPrefix}/fonts/special-elite.otf') format('otf'), url('{pathPrefix}/fonts/special-elite.eot') format('embedded-opentype'), url('{pathPrefix}/fonts/special-elite.svg') format('svg');\n    unicode-range: U+000-5FF;\n    size-adjust: 102%;\n}}\n"),
            "/theme/f/ubuntu-mono.css" => System.Text.Encoding.UTF8.GetBytes($"@font-face {{\n    font-family: 'ubuntu-mono';\n    font-style: normal;\n    font-weight: 400;\n    font-display: block;\n    src: url('{pathPrefix}/fonts/ubuntu-mono.woff2') format('woff2'), url('{pathPrefix}/fonts/ubuntu-mono.woff') format('woff'), url('{pathPrefix}/fonts/ubuntu-mono.ttf') format('truetype'), url('{pathPrefix}/fonts/ubuntu-mono.otf') format('otf'), url('{pathPrefix}/fonts/ubuntu-mono.eot') format('embedded-opentype'), url('{pathPrefix}/fonts/ubuntu-mono.svg') format('svg');\n    unicode-range: U+000-5FF;\n    size-adjust: 101%;\n}}\n"),
            "/theme/f/ubuntu.css" => System.Text.Encoding.UTF8.GetBytes($"@font-face {{\n    font-family: 'ubuntu';\n    font-style: normal;\n    font-weight: 400;\n    font-display: block;\n    src: url('{pathPrefix}/fonts/ubuntu.woff2') format('woff2'), url('{pathPrefix}/fonts/ubuntu.woff') format('woff'), url('{pathPrefix}/fonts/ubuntu.ttf') format('truetype'), url('{pathPrefix}/fonts/ubuntu.otf') format('otf'), url('{pathPrefix}/fonts/ubuntu.eot') format('embedded-opentype'), url('{pathPrefix}/fonts/ubuntu.svg') format('svg');\n    unicode-range: U+000-5FF;\n}}\n"),
            _ => null
        };
    
    public override string? GetFileVersion(string relPath)
        => relPath switch
        {
            "/2fa.js" => "638303903670000000",
            "/auth-request.js" => "638446726441510664",
            "/login.js" => "638303903830000000",
            "/register.js" => "638303904090000000",
            "/users-view.js" => "638445938081136764",
            "/verify-change.js" => "638303905220000000",
            "/verify.js" => "638303905080000000",
            "/fonts/roboto-mono.eot" => "638411470949411194",
            "/fonts/roboto-mono.otf" => "638411470949576421",
            "/fonts/roboto-mono.svg" => "638411470949788823",
            "/fonts/roboto-mono.ttf" => "638411470949939599",
            "/fonts/roboto-mono.woff" => "638411470950087365",
            "/fonts/roboto-mono.woff2" => "638411470950229264",
            "/fonts/roboto.eot" => "638411469495775983",
            "/fonts/roboto.otf" => "638411469495939369",
            "/fonts/roboto.svg" => "638411469496185143",
            "/fonts/roboto.ttf" => "638411469496350547",
            "/fonts/roboto.woff" => "638411469496497472",
            "/fonts/roboto.woff2" => "638411469496635695",
            "/fonts/special-elite.eot" => "638431795370000000",
            "/fonts/special-elite.otf" => "638431795370000000",
            "/fonts/special-elite.svg" => "638431795370000000",
            "/fonts/special-elite.ttf" => "638431795370000000",
            "/fonts/special-elite.woff" => "638431795370000000",
            "/fonts/special-elite.woff2" => "638431795370000000",
            "/fonts/ubuntu-mono.eot" => "638396347130000000",
            "/fonts/ubuntu-mono.otf" => "638396347130000000",
            "/fonts/ubuntu-mono.svg" => "638396347130000000",
            "/fonts/ubuntu-mono.ttf" => "638396347130000000",
            "/fonts/ubuntu-mono.woff" => "638396347130000000",
            "/fonts/ubuntu-mono.woff2" => "638396347130000000",
            "/fonts/ubuntu.eot" => "638396347130000000",
            "/fonts/ubuntu.otf" => "638396347130000000",
            "/fonts/ubuntu.svg" => "638396347130000000",
            "/fonts/ubuntu.ttf" => "638396347130000000",
            "/fonts/ubuntu.woff" => "638396347130000000",
            "/fonts/ubuntu.woff2" => "638396347130000000",
            "/recovery/password-request.js" => "638303901120000000",
            "/recovery/password-set.js" => "638303901340000000",
            "/recovery/username.js" => "638303901560000000",
            "/settings/2fa.js" => "638303902060000000",
            "/settings/apps.js" => "638447518964696246",
            "/settings/delete.js" => "638303902380000000",
            "/settings/email-verify.js" => "638303902990000000",
            "/settings/email.js" => "638303902660000000",
            "/settings/password.js" => "638304086870000000",
            "/settings/theme.js" => "638409309830483084",
            "/settings/username.js" => "638303903510000000",
            "/theme/a/blue-dark.css" => "638409345494219633",
            "/theme/a/blue-light.css" => "638409323479535394",
            "/theme/a/green-dark.css" => "638409320369317625",
            "/theme/a/green-light.css" => "638409346342444667",
            "/theme/a/none-dark.css" => "638431127351526354",
            "/theme/a/none-light.css" => "638431127351526354",
            "/theme/a/red-dark.css" => "638409355393188496",
            "/theme/a/red-light.css" => "638409349568528784",
            "/theme/a/violet-dark.css" => "638409320949773236",
            "/theme/a/violet-light.css" => "638409325056622515",
            "/theme/b/beige.css" => "638431087090597956",
            "/theme/b/black.css" => "638409480772043904",
            "/theme/b/dark.css" => "638409494781574474",
            "/theme/b/light.css" => "638409498007323872",
            "/theme/b/white.css" => "638409498541666478",
            "/theme/d/flat.css" => "638431805460000000",
            "/theme/d/layers.css" => "638448491969324121",
            "/theme/d/shadows.css" => "638409389307804389",
            "/theme/f/roboto-mono.css" => "638411977070000000",
            "/theme/f/roboto.css" => "638411978470000000",
            "/theme/f/special-elite.css" => "638431798730000000",
            "/theme/f/ubuntu-mono.css" => "638411982100000000",
            "/theme/f/ubuntu.css" => "638408589087061861",
            _ => null
        };
}
